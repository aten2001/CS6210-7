Examine the version of the producer-consumer code provided in the
instructor notes and answer the following questions. You may have to
copy and past into a text editor to see the line numbers.

1. The main function contains calls to exit() (line 57) and
pthread_exit() (line 65). How will the effect of these two calls
differ when they are executed?

exit() will make the whole process will terminate while pthread_exit() will only make the thread terminate

2. The main function calls pthread_join() (line 62) with the parameter
thread_return. Where does the value stored in thread_return come from
when the consumer_thread is joined?

It comes from the return value of consumer_routine function.

3. Where does the value stored in thread_return come from if the joined
thread terminated by calling pthread_exit instead of finishing
normally?

it comes from the parameter of pthread_exit() function.

4. On the same call to pthread_join() (line 62), what will it do if the
thread being joined (consumer_thread, in this case) finishes before
the main thread reaches the that line of code (line 62)?

then pthread_join() returns immediately. According to my experiment, If retval is not NULL, then pthread_join() copies the exit status of
the target thread to its argument.

5. In this program, the main thread calls pthread_join() on the threads
it created. Could a different thread call pthread_join() on those
threads instead? Could a thread call pthread_join() on the main thread
(assuming it knew the main thread's thread ID - i.e. pthread_t)?

Threads can join any joinable thread.

6. The consumer_routine function calls sched_yield() (line 148) when
there are no items in the queue. Why does it call sched_yield()
instead of just continuing to check the queue for an item until one
arrives?

Because we don't want to waste time checking the queue when the queue is empty. If queue is empty, it should let others use the CPU.
